name: Update ETag Issues
on:
  schedule:
    - cron: '11 4 * * 0,2,4'
  workflow_dispatch:
    inputs:
        import:
            description: Import an existing JSON output from a parser
            required: true
            default: false
            type: boolean
        importUrl:
            description: The URL to import from
            required: false
            default: ''
            type: string
        importName:
            description: Friendly name from ETagAttribute for the imported JSON
            required: false
            default: ''
            type: string
        diff:
            description: Diff the cache with the available ETags and update issues
            required: true
            default: true
            type: boolean

permissions:
  actions: write
  contents: read
  issues: write

jobs:
  importjsonfile:
    name: Import JSON File
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.import }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
            path: .cache
            key: etag-${{ github.run_id }}-import
            restore-keys: |
                etag
      - name: Check Inputs
        env:
            URL: ${{ inputs.importUrl }}
            NAME: ${{ inputs.importName }}
        run: |
            if [ -z "${URL}" ] && [ -z "${NAME}" ]; then
                echo "::error::Missing URL and NAME"
                exit 1;
            elif [ -z "${URL}" ]; then
                echo "::error::Missing URL"
                exit 1;
            elif [ -z "${NAME}" ]; then
                echo "::error::Missing NAME"
                exit 1;
            fi
      - name: Download File
        env:
            URL: ${{ inputs.importUrl }}
            NAME: ${{ inputs.importName }}
        run: |
            NAME=$(echo $NAME | jq -Rj @uri)
            mkdir -p .cache
            wget -O ".cache/$NAME.json" "$URL"
  diff:
    name: Diff cache with available ETags and update issues
    if: ${{ github.repository == 'StreamActions/StreamActions' && (github.event_name != 'workflow_dispatch' || inputs.diff) && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.x'
      - name: Set up Python packages
        run: pip install -r ./Diff/requirements.txt
      - name: Cache
        uses: actions/cache@v4
        with:
            path: .cache
            key: etag-${{ github.run_id }}
            restore-keys: |
                etag
      - name: Run diffs
        uses: actions/github-script@v7
        with:
            script: |
                core.info('Preparing...');
                const fs = require('fs');
                const issuePattern = /(\[(?<Check>[ x])\] )?\[(?<Name>[^\]]+)\]\((?<URL>[^\)]*)\)/;

                fs.mkdirSync('./.output');

                core.info('Finding ETags...');
                await exec.exec('python', ['./Diff/ETagFinder.py', '--folder', '.', '--out', './.output/etags.json']);

                let etags = JSON.parse(fs.readFileSync('./.output/etags.json', 'utf8'));

                core.info('Found ' + Object.keys(etags).length + ' ETags');
                for (let file of Object.keys(etags)) {
                    for (let etag of etags[file]) {
                        core.startGroup(etag.friendlyname);
                        let name = encodeURIComponent(etag.friendlyname);
                        try {
                            fs.accessSync('./Diff/parsers/' + etag.parser + '.py');
                            core.debug('Found parser');
                        } catch (e) {
                            core.warning('Parser ' + etag.parser + ' not found, skipping...');
                            core.endGroup();
                            continue;
                        }

                        let parameters = ['./Diff/parsers/' + etag.parser + '.py', '--url', etag.url, '--out', './.output/' + name + '.json'];
                        let shouldDiff = false;
                        try {
                            fs.accessSync('./.cache/' + name + '.json');
                            core.debug('Found base file');
                            parameters = parameters.concat(['--lhs', './.cache/' + name + '.json', '--diffout', './.output/' + name + '.diff.json']);
                            shouldDiff = true;
                        } catch (e) {
                            core.warning('Base file not found, will not diff');
                        }

                        parameters = parameters.concat(etag.parameters);

                        core.info('Running parser ' + etag.parser + '...');
                        let {exitCode, stderr} = await exec.getExecOutput('python', parameters);

                        if (exitCode !== 0) {
                            core.error('Encountered error running parser, skipping...');
                            core.error(parameters);
                            core.error(stderr);
                            core.endGroup();
                            continue;
                        }

                        let {stdout} = await exec.getExecOutput('sha256sum', ['./.output/' + name + '.json']);
                        let sha = stdout.split(' ')[0].trim().toUpperCase();
                        let date = new Date().toISOString();
                        date = date.substring(0, date.lastIndexOf(':')) + date.substring(date.length - 1);
                        core.debug(sha);
                        core.debug(date);

                        if (shouldDiff) {
                            core.debug('Diffing');
                            let diff = JSON.parse(fs.readFileSync('./.output/' + name + '.diff.json', 'utf8'));
                            let newData = JSON.parse(fs.readFileSync('./.output/' + name + '.json', 'utf8'));
                            if (Object.keys(diff).length === 0) {
                                core.info('No diff found, skipping issue update...');
                            } else if (Object.keys(newData).length === 0) {
                                core.info('No data found, skipping issue update...');
                            } else {
                                core.info('Downloading issue ' + etag.issue + '...');
                                let {status: issueStatus, data: issue} = await github.rest.issues.get({
                                    owner: context.repo.owner,
                                    repo: context.repo.repo,
                                    issue_number: etag.issue
                                });

                                if (issueStatus !== 200) {
                                    core.warning('Issue ' + etag.issue + ' not found, skipping...' + issueStatus);
                                    core.endGroup();
                                    continue;
                                }

                                let body = {
                                    header: [],
                                    data: {}
                                };

                                core.debug('Start parsing issue');
                                let section = '__HEADER';
                                let category = '__header';
                                for (let line of issue.body.split('\n')) {
                                    line = line.replace('\r', '');
                                    core.debug('Line: ' + line);
                                    if (line.startsWith('# ')) {
                                        core.debug('H1');
                                        issuePattern.lastIndex = 0;
                                        let match = issuePattern.exec(line.substring(2));
                                        if (match === null) {
                                            core.warning('Found non-conforming section header, skipping...');
                                            core.debug(line);
                                            continue;
                                        }
                                        section = match.groups.Name;
                                        let url = match.groups.URL;
                                        core.debug('--Section: ' + section + ' <> URL: ' + url);
                                        if (!body.data.hasOwnProperty(section)) {
                                            core.debug('--Add section');
                                            body.data[section] = {'__header': [], '__url': url, '__etag': '', '__date': ''};
                                        }
                                        category = '__header';
                                    } else if (line.startsWith('ETag: ') && section !== '__HEADER' && category === '__header') {
                                        core.debug('--ETag');
                                        body.data[section]['__etag'] = line.substring(6);
                                    } else if (line.startsWith('Date: ') && section !== '__HEADER' && category === '__header') {
                                        core.debug('--Date');
                                        body.data[section]['__date'] = line.substring(6);
                                    } else if (line.startsWith('### ') && section !== '__HEADER') {
                                        core.debug('--H3');
                                        category = line.substring(4);
                                        core.debug('----Category: ' + category)
                                        if (!body.data[section].hasOwnProperty(category)) {
                                            core.debug('----Add Category');
                                            body.data[section][category] = {};
                                        }
                                    } else if (line.startsWith('- ') && section !== '__HEADER' && category !== '__header') {
                                        core.debug('----LI');
                                        issuePattern.lastIndex = 0;
                                        let match = issuePattern.exec(line.substring(2));
                                        if (match === null) {
                                            core.warning('Found non-conforming item, skipping...');
                                            core.debug(line);
                                            continue;
                                        }
                                        let check = match.groups.Check;
                                        let name = match.groups.Name;
                                        let url = match.groups.URL;
                                        core.debug('------Checked: ' + check + ' <> Name: ' + name + ' <> URL: ' + url);
                                        if (!body.data[section][category].hasOwnProperty(name)) {
                                            core.debug('------Add item');
                                            body.data[section][category][name] = {};
                                        }
                                        body.data[section][category][name].checked = check.toLowerCase() === 'x';
                                        body.data[section][category][name].url = url;
                                    } else if (section !== '__HEADER' && category === '__header') {
                                        if (line.trim().length > 0) {
                                            core.debug('--Header line');
                                            body.data[section]['__header'].push(line);
                                        }
                                    } else if (section === '__HEADER') {
                                        if (line.trim().length > 0) {
                                            core.debug('-Global Header Line');
                                            body.header.push(line);
                                        }
                                    } else {
                                        if (line.trim().length > 0) {
                                            core.warning('Found random line, skipping...' );
                                            core.debug(line);
                                        }
                                        continue;
                                    }
                                }
                                core.debug('body: ' + JSON.stringify(body));
                                core.debug('diff: ' + JSON.stringify(diff));
                                core.debug('newData: ' + JSON.stringify(newData));
                                core.debug('Prep body');
                                section = etag.friendlyname;
                                core.debug('Section ' + section);
                                if (!body.data.hasOwnProperty(section)) {
                                    core.debug('--Add section');
                                    body.data[section] = {'__header': [], '__url': etag.url, '__etag': '', '__date': ''};
                                }
                                let diffKeys = Object.keys(diff['endpoints']);
                                core.debug('Check diffKeys');
                                if (diffKeys.length > 0) {
                                    core.debug('Found ' + diffKeys.length + ' keys');
                                    body.data[section]['__etag'] = sha;
                                    body.data[section]['__date'] = date;
                                    core.debug('Iterate newData');
                                    for (let category of Object.keys(newData.toc)) {
                                        core.debug('Category ' + category);
                                        if (!body.data[section].hasOwnProperty(category)) {
                                            core.debug('--Add category');
                                            body.data[section][category] = {};
                                        }
                                        for (let endpoint of newData.toc[category]) {
                                            core.debug('Endpoint ' + endpoint.endpoint);
                                            if (!body.data[section][category].hasOwnProperty(endpoint.endpoint)) {
                                                core.debug('--Add endpoint');
                                                body.data[section][category][endpoint.endpoint] = {'checked': false, 'url': ''};
                                            }
                                        }
                                    }
                                    core.debug('Iterate diffKeys');
                                    for (let endpoint of diffKeys) {
                                        core.debug('Endpoint ' + endpoint);
                                        for (let category of Object.keys(body.data[section])) {
                                            core.debug('--Check category ' + category);
                                            if (body.data[section][category].hasOwnProperty(endpoint)) {
                                                core.debug('----Found in body');
                                                body.data[section][category][endpoint].checked = false;
                                                if (Object.keys(newData.endpoints).includes(endpoint)) {
                                                    core.debug('----Found in newData');
                                                    if (newData.endpoints[endpoint].slug !== null) {
                                                        core.debug('------Has slug');
                                                        body.data[section][category][endpoint].url = etag.url + newData.endpoints[endpoint].slug;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                core.debug('Gather lines');
                                let newBody = [];
                                core.debug('--Global header');
                                for (let line of body.header) {
                                    newBody.push(line);
                                }
                                for (let section of Object.keys(body.data)) {
                                    core.debug('--Section ' + section);
                                    let sdata = body.data[section];
                                    core.debug('----URL: ' + sdata['__url']);
                                    newBody.push('');
                                    newBody.push('# [' + section + '](' + sdata['__url'] + ')');
                                    if (sdata['__etag'].length > 0) {
                                        core.debug('----ETag');
                                        newBody.push('ETag: ' + sdata['__etag']);
                                    }
                                    if (sdata['__date'].length > 0) {
                                        core.debug('----Date');
                                        newBody.push('Date: ' + sdata['__date']);
                                    }
                                    if (sdata['__header'].length > 0) {
                                        core.debug('----Header');
                                        for (let line of sdata['__header']) {
                                            newBody.push(line);
                                        }
                                    }
                                    for (let category of Object.keys(sdata)) {
                                        if (category === '__header' || category === '__url' || category === '__etag' || category === '__date') {
                                            continue;
                                        }
                                        core.debug('----Category ' + category);
                                        let cdata = sdata[category];
                                        let ckeys = Object.keys(cdata);
                                        if (ckeys.length > 0) {
                                            newBody.push('');
                                            newBody.push('### ' + category);
                                            for (let item of ckeys) {
                                                core.debug('------Item ' + item);
                                                let idata = cdata[item];
                                                core.debug('--------Checked: ' + (idata['checked'] ? 'x' : ' ') + ' <> URL: ' + idata['url']);
                                                newBody.push('- [' + (idata['checked'] ? 'x' : ' ') + '] [' + item + '](' + idata['url'] + ')');
                                            }
                                            newBody.push('');
                                        }
                                    }
                                }
                                core.debug('Update issue');
                                let {status: updateStatus} = await github.rest.issues.update({
                                    owner: context.repo.owner,
                                    repo: context.repo.repo,
                                    issue_number: etag.issue,
                                    body: newBody.join('\n')
                                });

                                if (updateStatus !== 200) {
                                    core.warning('Failed to update issue ' + etag.issue + ', skipping...' + updateStatus);
                                    core.endGroup();
                                    continue;
                                }
                            }
                        }

                        core.info('Updating base file...');
                        fs.renameSync('./.output/' + name + '.json', './.cache/' + name + '.json');

                        core.endGroup();
                    }
                }

                core.info('Cleaning up old caches...');
                let {status: cacheStatus, data: caches} = await github.rest.actions.getActionsCacheList({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    key: 'etag',
                    ref: 'refs/heads/main',
                    sort: 'created_at',
                    direction: 'desc'
                });

                if (cacheStatus !== 200) {
                    core.warning('Failed to list caches...' + cacheStatus);
                } else {
                    let first = true;
                    for (let cache of caches.actions_caches) {
                        if (first) {
                            first = false;
                        } else {
                            let {status: deleteStatus} = await github.rest.actions.deleteActionsCacheById({
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                cache_id: cache.id
                            });

                            if (deleteStatus !== 200) {
                                core.warning('Failed to delete cache ' + cache.key + ' (' + cache.id + ')...' + deleteStatus);
                                core.endGroup();
                                continue;
                            }
                        }
                    }
                }
